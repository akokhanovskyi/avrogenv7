// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avro
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type UnionStringBytesNullTypeEnum int

const (
	UnionStringBytesNullTypeEnumString UnionStringBytesNullTypeEnum = 0

	UnionStringBytesNullTypeEnumBytes UnionStringBytesNullTypeEnum = 1
)

type UnionStringBytesNull struct {
	String    string
	Bytes     []byte
	Null      *types.NullVal
	UnionType UnionStringBytesNullTypeEnum
}

func writeUnionStringBytesNull(r *UnionStringBytesNull, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(2, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionStringBytesNullTypeEnumString:
		return vm.WriteString(r.String, w)
	case UnionStringBytesNullTypeEnumBytes:
		return vm.WriteBytes(r.Bytes, w)
	}
	return fmt.Errorf("invalid value for *UnionStringBytesNull")
}

func NewUnionStringBytesNull() *UnionStringBytesNull {
	return &UnionStringBytesNull{}
}

func (_ *UnionStringBytesNull) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionStringBytesNull) SetLong(v int64) {
	r.UnionType = (UnionStringBytesNullTypeEnum)(v)
}
func (r *UnionStringBytesNull) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: (&r.String)}
	case 1:
		return &types.Bytes{Target: (&r.Bytes)}
	case 2:
		return r.Null
	}
	panic("Unknown field index")
}
func (_ *UnionStringBytesNull) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionStringBytesNull) Finalize()                        {}

func (r *UnionStringBytesNull) MarshalJSON() ([]byte, error) {
	if r == nil {
		return []byte("null"), nil
	}
	switch r.UnionType {
	case UnionStringBytesNullTypeEnumString:
		return json.Marshal(map[string]interface{}{"string": r.String})
	case UnionStringBytesNullTypeEnumBytes:
		return json.Marshal(map[string]interface{}{"bytes": r.Bytes})
	}
	return nil, fmt.Errorf("invalid value for *UnionStringBytesNull")
}

func (r *UnionStringBytesNull) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if value, ok := fields["string"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.String)
	}
	if value, ok := fields["bytes"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Bytes)
	}
	return fmt.Errorf("invalid value for *UnionStringBytesNull")
}
